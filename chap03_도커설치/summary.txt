우분투 관련
	sudo >>SUperuser DO. 현재 사용자 권한이 어케됬건 root 권한으로 (sudo 뒤의) 명령어를 실행시킨다.
	apt >>Advanced Package Tool. 우분투에서 쓰이는 데비안 계열의 패키지를 관리하는데 쓰이는 도구
		: 응용프로그램 설치 삭제 업데이트 등의 작업을 하는데 사용된다

디지털 서명 >> jwt 의 마지막에 추가되는 키 같은거. 
디지털 서명을 한다 >> 특정 키로 해당 데이터를 암호화 했다.

HTTP 특성
	1. connectionless >> response 끝나면 연결 바로 끊김
	2. stateless >> 이전에 통신했던 내용 저장 따로 안해둔다. 



암호화 종류
    (1) 양방향. 복호화 가능. >> 원본 데이터를 복호화할 수 있어야 하는 상황, 예를 들어 안전한 정보 전송이 필요한 경우에 적합
	: https://velog.io/@480/RSA-%EC%95%94%ED%98%B8%ED%99%94-3%EB%B6%84-%EB%A7%8C%EC%97%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0

	1. 대칭키 암호화 : 하나의 키로 암호화, 복호화.
		: 대표적으론 AES , HMAC , HS256 
			: HS256 >>  HMAC + SHA256 . 
		: 보안측면에선 비대칭보다 딸린다 >> 어쨌뜬 키를 발급한 대상이 상대에게 한 번 이상 키를 넘겨줘야되니까. 

******2. 비대칭키 암호화: 각각 다른 키로 암호화, 복호화
		: 대표적으론 RSA
			: RSA라는 이름에 별 의미는 없다. 이 암호화 기법을 만든 수학자 3명의 이름을 따온것이다.

		: how it works >>  
			(1) 데이터를 받게 되는 쪽에서, 데이터를 주는 쪽에게 자물쇠와 해당 자물쇠를 잠글 키를 준다. 이때 키는 자물쇠를 잠글 수만 있고, 열 수는 없는 키이다.
			(2) 데이터를 주는 쪽에서 해당 자물쇠와 키로 보낼 데이터를 잠궈서 데이터를 전송한다
			(3) 데이터를 받는 쪽에서 자신이 가지고 있는 해당 자물쇠를 열 수 있는 키로 해당 자물쇠를 열어서 데이터를 확인한다. 	
				: 그러니까 복호화 가능한 키는, 데이터를 받는 쪽에서 항상 자신만 가지고 있던 것이다.
		: 암호화하는 키를 public key, 복호화 하는 키를 private key 라고 한다.

    (2) 단방향. 해싱. 복호화 불가. >> 위조만 판단하면 되고,  민감한 정보를 포함해야하는 상황. ( ex- 회원가입시 db에 password 를 저장할 때 해싱하여 저장하여 개발자조차도 알 수 없게 한다 && 로그인 할 때 입력된 password 값을 db에 암호화되어 저장된 password 값과 비교하기 위해  입력된 password 값도 해싱하여 두 값이 같은지 판단한다. )
	: https://porolog.tistory.com/m/52
	: 대표적으론 SHA256
		: Secure Hash Algorithm 256 >>  입력된 데이터를 256비트 길이의 해시값으로 변환
			:  데이터의 무결성을 확인하는데 적합하며, 원본 데이터를 추론할 수 없는 고유한 해시값을 제공(산출되는 해시값은 원래 데이터에 대한 정보를 전혀 가지지 않는다)


무결성>> 데이터의 정확성, 일관성, 유효성이 유지되는 것

JWT 에서의 암호화 방식
	:https://velog.io/@junghyeonsu/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%90%EC%84%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95
	: JWT 구성 
		Header >> 해당 JWT 토큰을 어떻게 검증하는지에 대한 설명. 알고리즘 형식 (RS256 / HS256 등)을 적는다.
		payload >> 보내고자 하는 데이터. key-value 쌍의 정보의 한 조각을 클레임 claim 이라 하는데, payload 는 여러개의 claim 을 담을 수 있다
		signature >> header, payload 를 서명한 값.

	case1. HS256
		1. 서버에서 Header, Payload 를 Base64로 인코딩, Signature 는 Header, Payload 각각이 Base64로 인코딩된 값+ secret 값" 을 HS256 알고리즘으로 암호화됨.
		2. 생성된 Header, Payload, Signature 로 JWT 토큰을 만들어 클라이언트로 보내고, 클라이언트는 로컬 스토리지에 토큰을 저장
		3. 클라이언트는 서버에 요청이 있을 경우, 토큰과 요청 내용을 같이 보냄
		4. 서버에서는 Header 와 Payload 를 Base64 알고리즘으로 복호화한 뒤, 서버만 알고 있는 개인키를 가지고 다시 HS256 알고리즘을 이용해 암호화해보고, 클라이어트에서 보낸 토큰과 같은지 유효성 검증을 함.

	case2. RS256

SSL Secure Sockets Layer 보안 소켓 계층, TLS  Transport Layer Security >> 암포화 기반 인터넷 보안 프로토콜.
	: 특징
		1. 핸드셰이크라는 인증 프로세스를 도입해 두 장치(클라이언트, 서버)의 ID 를 확인 
		2. 데이터에 디지털 서명하여 데이터 무결성 제공
		3. RSA 와 AES 섞어쓴다.
	: SSL 이 업데이트 한게 TLS  이다. SSL은 현재 사용 중인 TLS 암호화의 전신
	: SSL/TLS를 사용하는 웹사이트는 "HTTP" 대신 "HTTPS" 쓴다.

SSL 인증서 >> 서버의 신원을 확인하기 위한 신분증 같은거다.
	: SSL/TLS 인증서 가 있는 웹사이트에서만 SSL 프로토콜의 사용이 가능하다.
	: 그러니까 클라이언트가 올바른 서버와 통신하고 있는지 확인하는 용도의 파일. 중간에 요청 뺐어서 제3의 서버로 요청을 보내게 하는 DNS 스푸핑 같은걸 막는다.
	: public key 와 private key (비공개) 를 포함한다.
	: https://aws-hyoh.tistory.com/59



CA >>  SSL 보안 인증서를 발급 및 인증하는 기관"들"
	: 개인적으로도 SSL 인증서를 발급할 수 있지만, 그 인증서를 인증해 줄 기관이 있어야 신뢰 가능하기에 어떤 기관을 중간에 껴야 실질적인 SSL 인증서의 기능을 하는 인증서의 발급이 가능
	: certificate authority의 약자	
	: certifacate chain >> 
		: 인증기관이 띡 하나만 존재하면, 해당 인증기관의 private key 만 털면 되니까 위험하다. 그래선지 2~3계층 구조로 이뤄져있다. 
		: 하위 계층으론 서명하고(해당 계층의 키로 하위계층의 데이터 암호화) 상위 계층으로는 참고하는(해당 계층의 데이터를 상위계층의 키로 암호화) 방식
			: SSL 인증서는 n개의 intermediate CA 에서 n 번 검증을 받은 뒤, 최종적으로 Root CA 에게 검증을 받고, Root CA 는 스스로를 검증하는 방식으로 검증된다.
			: 브라우저가 https 웹사이트에 접속 >> 웹사이트 인증서 다운 >> 해당 인증서를 체인을 따라가며 루트 인증서에 도달할 때까지 계속 역추적

		1. Root CA : 모두가 신뢰하기로 합의한 최상위 인증기관
		2. Intermediate CA: 중간 기관(들) 
		3. Leaf CA: 서버 인증서
			: 개발자가 구입하게 되는 SSL 인증서. 
			


	: 브라우저는 인증서를 발급한 주요 인증기관의 리스트와 public key 를 이미 보유하고 있다. 서버의 인증서를 요청하여 검증할 때마다 직접 인증기관으로 가진 않고, 해당 인증서가 자신이 보유한 인증기관의 리스트 중 하나일 경우 이미 가지고 있는 공개키를 이용하여 복호화한다. 자신이 보유하지 않은 인증기관의 공개키라면, 외부 인터넷으로 나가 인증기관 관련정보와 공개키를 확보한다. 그래서 SSL 인증서를 사용하는 경우 인터넷 접속이 필요하다
	: https://babbab2.tistory.com/5

해커가 만든 root ca, intermediate ca 가 아니라 실제 root ca , intermeidate ca 임을 인증하기 위한 구조

---------------------------------------------------------------------------------------------------------------

--도커 설치하기--


사전준비
	1. 도커 리포지토리 와 통신할 수 있는 환경 설정
		:  도커 리포지토리 >> 도커를 설치하기 위해 필요
		step1.  apt 패키지 인덱스를 업데이트 >>sudo apt-get update
		step2.  apt가 HTTPS에서 리파지토리를 사용할 수 있게 하는데 필요한 패키지를 설치 >>sudo apt-get install ca-certificates curl gnupg lsb-release
			: ca-certificates >> 인증서 관련 설치
				: ca-certificates :  신뢰할 수 있는 인증 기관(Certificate Authority, CA) 목록을 포함하는 패키지. 
					:  SSL/TLS 연결을 설정할 때 서버 인증서를 검증하는 데 사용됨
					: ca >> SSL 인증서 발행을 담당하는 대표적인 인증기관 이름

			: curl >> 파일을 다운로드하기 위한 패키지
			: gnupg >> 디지털 서명을 사용하기 위해  설치
				: GNU Privacy Guard :  암호화 기술인 PGP를 기반으로 만들어진 암호화 소프트웨어.
			: lsb-release >> 리눅스 배포판 식별을 위해 필요한 패키지

식별자
