도커를 활용한 django 실행
	: pyenv 를 활용한 파이썬 가상환경 구축
	: YAML 파일 개념
	: docker compose 를 활용해 웹 서비스를 실행

---------------------------------------------------------------------------------------------------------

갑자기 발생한 에러의 원인
	: https://tbmaster.tistory.com/132

noble, focal 같은거 >> 우분투 버전
	: 나는 noble ( 24.04 LTS )

내용 긴 파일 스크롤 하면서 보는 법 >> less 파일명
	: ↓ 또는 ↑ 키로 스크롤 가능하고, q 키를 사용하여 벗어난다. 	
	: 근데 뭐 어차피 PuTTy 설치했는데 그거쓰자 굳이 virtual box 그대로 쓰지 말고




apt 와 repository 
	: https://jjeongil.tistory.com/1682	
	: https://www.todayhumor.co.kr/board/view.php?table=computer&no=92067 << 3번째 댓글
	: apt Advanced Packaging Tool >> 패키지 관리(설치, 업데이트,제거) 툴
		: apt 가 설치 및 업데이트를 할 때, "repository" 에서 해당 패키지를 가져오게 된다. 

	: apt repository >> apt 로 설치당하는 패키지가 저장되있는 저장소.
		: ubuntu 기본 리파지토리 >> 4가지 컴포넌트(구성요소) 로 이루어짐
		    : basic 하다는점에서 "기본"인거지, 배포될 때부터 깔려있다는게 아님 주의
			1. main
			2. restricted 
			3. multiverse
			4. universe

		: /etc/apt/sources.list.d 의 ubuntu.sources (이전엔 sources.list . 형식은 같다 ) 에 repository가 정의되어진다
			: 정의 형식  >> [ deb || deb-src ] [ 리파지토리URL ] [우분투버전] 컴포넌트명
			    : deb >> (사전 컴파일된) 바이너리형식의 리포지토리 패키지. 일반적으로 사용.
			    : deb-src >> (원본) 소스코드형식의 리포지토리 패키지
			    : 컴포넌트 여러개 나열 가능(띄어쓰기로 구분하는거지 콤마는 안쓰는거 주의)

			   

			    : ex ) 
				: deb http://archive.ubuntu.com/ubuntu noble main restricted multiverse universe
			    	: deb http://archive.ubuntu.com/ubuntu noble-update main restricted multiverse universe << 구글링했을때 이거 한 글은 못봤는데 GPT는 (기본저장소 추가 후) 업데이트 저장소까지 추가하더라. 


	: ubuntu 에 repository 를 추가하는 법
	    : repository 를 추가한다 == apt 가 패키지를 가져올 수 있는 repository의 URL을 추가한다 
		sol1. add-apt-repository 명령어 사용
		    : add-apt-repository >>apt repository 설정을 쉽게 할 수 있데 해주는 툴
			:  sources.list 을 직접 편집하지 않아도 되게 해준다.
			: 이 패키지의 사용을 위해선 software-properties-common 패키지가 먼저 설치되어있어야됨
				: sudo apt-get install software-properties-common
			: 사용법 >> sudo add-apt-repository "sources.list에서의리파지토리정의형식" 

		sol2. 텍스트 편집기 사용 >> 직접 "[ deb || deb-src ] [ 리파지토리URL ] [우분투버전] 컴포넌트명" 입력



가상환경>> 독립된 개발환경.
	: 프로젝트를 진행하다 보면 여러 모듈을 설치하게 되는데, 각 모듈은 서로 의존성(dependency)을 가지는 경우가 많기 때문에 글로벌하게 모듈을 설치하게 되면 여러 프로젝트를 관리하기 어려운데, 이를  각각의 프로젝트에 필요한 모듈을 별도의 로컬 환경에 설치하는 방식으로 해결해주는 것이 가상환경
		: ex ) 프로젝트1에서는 A, B, 프로젝트2에서는 A, C라는 모듈을 사용하며 B는 A가 1.x 버전이고, C는 A가 2.x 버전이어야 사용 가능한 상황 >> 모듈을 글로벌 환경에 설치한다면 A는 1.x 또는 2.x 둘 중 하나만 설치할 수 있으므로 두 프로젝트를 모두 관리할 수 없다. 이때 가상환경을 통해 분리하여 설치하면 된다.

	: 파이썬 대표 가상환경
	    : 비표준
		1. virtualenv : 비표준 중 가장 많이 사용
		2. pyenv 

	    : 표준
		1. venv :  현재 기준으로 유일하게 표준 라이브러리에서 지원하는 가상환경 라이브러리. Python 3.3부터 사용가능


	: https://homubee.tistory.com/38



이번 실습 과정에서 이러쿵 저러쿵 우여곡절 많았는데 결론 >> 교재를 그대로 따라하지 않은 내가 ㅂㅅ이었다🙆‍♀️
	




실습을 위한 패키지 및 라이브러리
	: pyenv >> 파이썬 버전 관리 도구
		: 여러 버전의 python 을 설치하고 사용할 수 있게 도와준다

	: django >> 웹 프레임워크 라이브러리
	: gunicorn >> 웹 서버 통신 라이브러리
	: psycopg2 >> PostGreSQL 활용을 위한 라이브러리
	: tree >> 리눅스 시스템서 파일 시스템 구조를 시각적으로 쉽게 보여주는 패키지
		: sudo apt install tree 로 설치
		: "tree 경로" 로 , 해당 경로 이하의 디렉터리 구조 파악 가능

	: curl 과 wget >> 웹 서버로부터 컨텐츠를 가져오는 패키지
		: 둘 다 기능이 고만고만한데 curl 이 좀 더 최근거임.
		: 빠르긴 wget 이 더 빠른데 curl 이 좀더 복잡한 다운로드를 지원



pyenv 관련 헷갈리는 명령어  >> 유독 목록(?) 관련 좀 명령어가 헷갈리게 작명되어있다
	(1) pyenv --version : pyenv 자체의 버전을 출력
	(2) pyenv install --list : pyenv로 설치 가능한 파이썬 버전 목록확인
	(3) pyenv versions : 설치된 모든 파이썬 버전과 가상 환경 목록을 표시
	(4) pyenv virtualenvs : 설치된 모든 가상환경정보 확인
	(5) pyenv version : 현재 사용 중인 파이썬 버전에 관련된 정보 표시


pyenv , python , virtualenv , pip 의 관계
     : 그러니까 pyenv 가 우선 설치되고, pyenv 로 원하는 버전의 python 설치하고, pyenv 로 해당 버전의 virtualenv 생성하고, 그 virtualenv 내에서 pip 로 원하는 파이썬 패키지 install 하여 관리하는거다 
	: pyenv >> 다양한 python 버전 설치 및 관리 + 가상환경 생성 도구  
		: pyenv 로 여러 python 패키지를 설치 가능하다.
		: pyenv virtualenv 명령어를 사용하여 virtualenv 즉 가상환경을 생성할 수 있다.

	: pip Package Installer for Python >> 파이썬 패키지 관리자. 파이썬 관련 패지지를 설치 및 관리하는 도구
		: python 패키지 설치 시,  자동적으로 pip 패키지도 함께 다운로드된다.





pyenv 설치하기
	step1. 본격 pyenv 설치 이전에 먼저 설치해야할것 >> sudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
		: 수행하는데 E: unable to locate package 에러 나면 >> repository 에 대한 설정이 제대로 안되어있는것.
			: 리파지토리 정의 하기 >> add-apt-repository "deb http://archive.ubuntu.com/ubuntu noble main restricted multiverse universe" 
				: 완료되면 /etc/apt/sources.list 에 해당 리파지토리들에 대한 위치가 잡혀서, 해당 리파지토리에 저장된 패키지들을 호스트의 apt 가 잘 인식할 수 있게 된다


	step2. 본격 pyenv 설치 >> curl https://pyenv.run | bash 
		: 앞서 설치한 curl 패키지를 사용하여 request 하여 스크립트를 다운받고, 다운로드한 스크립트를 bash 셸에서 실행한다. 
			: pyenv 가 스크립트란 말이 아니라, pyenv 를 설치 및 설정하는 과정에서 스크립트가 다운로드 되고 사용된다는 거임
				: 스크립트 >>  프로그램이나 명령어의 집합. 특정 작업을 자동화하거나 일련의 명령어를 순차적으로 실행하기 위해 작성된 텍스트 파일.



	
	step3. 추가 환경 설정 >> 
		step(1) 홈 디렉터리에서 파일 목록 확인>>  ls -al 
			: 숨김 파일인 .bashrc 파일 확인 가능

		step(2) vim .bashrc 로 .bashrc 파일의 젤 끝에 다음 4줄 추가
			export PYENV_ROOT="$HOME/.pyenv"
			command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
			eval "$(pyenv init -)"
			eval "$(pyenv virtualenv-init -)"

		step(3) 셸 재시작 >> exec $SHELL



	step4. 제대로 설치되었는지 확인 >> pyenv -v



설치된 pyenv 로 python 설치하기
	step1.  설치 가능한 python 버전 확인 >> pyenv install --list
	step2.  pyenv 로 python 설치 >> pyenv install 특정버전 
		: 말 그대로 3.11.6 과 같은 특정 버전이지, "python 3.11.6" 의 꼴이 아님
	step3. 잘 설치되었는지 확인 >> pyenv versions





가상환경 관련
	설치된 python으로 가상환경 생성하기 >> pyenv virtualenv [설치된파이썬의버전] [가상환경명]
	생성된 가상환경 목록 확인 >> pyenv versions 및 pyenv virtualenvs 
	가상환경 실행 >> pyenv activate [가상환경명]
		: 제대로 실행되면 이후 라인부터 프롬프트의 젤 앞에 "(가상환경명)" 이 추가된 꼴로 진행된다
			ex ) py3_11_6이라는 가상환경을 activate 시킨 경우 >> (py3_11_6) eevee@myserver01:~$


	가상환경에 ( python기반 ) 라이브러리 설치 >> pip install 라이브러리명
		: 물론 가상환경 실행한 상태에서 설치해야됨 !!
		: 실습에서 가상환경에 설치한 잔잔바리 라이브러리들 ) django, gunicorn, psycopg2-binary
		: 제대로 설치됬는지 확인하려면 
			step1. python 실행 >> python
			step2. 설치한 라이브러리 import >> import django 등 차례대로 입력
			step3. import 한 라이브러리 버전 확인 >> 라이브러리명.__version__ 해서 버전 날 자오는지 확인

	가상환경 종료 >> source deactivate 




tree 설치
	: 

