


--사전 기초 지식--

하드웨어 와 소프트웨어
	: 컴퓨터는 크게 "하드웨어"와 "소프트웨어"로 구성
	: 하드웨어 Hardware >> 물리적인 기계 장치
	    : 분류
		: CPU 와 RAM 만 있어도 좁은 의미로는 컴퓨터라고 할 수 있다
		: 중앙처리 장치 >> CPU
			: CPU Central Proessing Unit
				: 컴퓨터의 두뇌
				: 연산 및 시스템 제어를 수행
				
		: 주기억 장치 >> RAM 
			: RAM Random Access Memory
				: 프로그램이 CPU 로 작업될 수 있는 작업 공간
				: 보조기억장치(SSD/HDD)에서 필요한 것을 RAM 에 올려서 CPU 가 작업하게 한다

		: 보조 기억 장치 >> SSD , HDD 
			: HHD Hard Disk Drive 
				: 정보를 장기적으로 "물리적"으로  저장하고 있는 공간
				: 자기장 원리 사용
				: 읽기 쓰기 속도 "느림"

			: SSD Solid State Drive
				: 정보를 장기적으로 "플래시메모리"로 저장하고 있는 공간
					: 물리적 != 플래시
				: 읽기 쓰기 속도 빠름

		: 입력 장치 >> 키보드, 마우스
		: 출력 장치 >> 모니터 
 
	: 소프트웨어 Software >> 하드웨어에서 작동되는 프로그램	
	    : 분류	
		: 애플리케이션  >> 엑셀, 파워포인트 ... 등 뿐 
			; 일반적인 소프트웨어

		: 시스템 소프트웨어 >> 운영체제


운영체제 OS Operating System	
	: 시스템 소프트웨어.
	: 하드웨어와 소프트웨어 자원을 관리한다
		: 이를 위해 스케줄링 기능 및 프로그램이 실행될 수 있는 환경 제공

	: 세부 구성
		1. 운영체제 라이브러리
		2. 운영체제 외 라이브러리
		3. 커널 

	: 셸 . 쉘 . shell >> OS 와 사용자 사이에서 다리 역할을 하는 프로그램
		: 운영체제를 껍질처럼 감싸고 있어서 "shell" 인 것
		: bash , zsh 등 


프로그램, 프로세스, 스레드
	: 프로그램 >> 실행 가능한 "정적인" 명령어(코드)의 집합. 
		: 정적인 == 메모리(RAM)에 올라가지 않은 상태 == 실행중이진 않은 상태
 		: 프로그램은 디스크(SSD/HDD)에 존재하는 명령어 집합

	: 프로세스 Proccess >> 동적인(=실행 중인) 명렁어 집합
 		: 프로세스는 RAM에 존재하는 명령어 집합
		: 멀티 프로세스 >>여러개의 프로세스를 작동시키는 것.
 			: 실제로 동시에 여러개의 프로세스를 작동시키는건 아니고, 짧게짧게 돌아가면서 실행시켜서 동시에 실행되는 것 처럼 보이는거다
		: 한 프로세스는 최소 1개 이상의 스레드를 가짐
			: 프로세스 별로 Main Thread 는 꼭 가진다
			: ex ) 유튜브에선 동영상 보여주는 스레드, 댓글 쓰는 스레드 , 알림 제공하는 스레드 등이 있다
		: 프로세스는 스레드의 컨테이너라고 봄 됨
			: 그러니까 프로세스는 스레드의 정보를 담고 있다

	: 스레드 Thread >> 한 프로세스 내의 실행 흐름 하나.
		: 실. 가닥.


데몬 Daemon >> (Unix 운영체제에서) 부팅시 자동으로 켜지고, 백그라운드에서 계속 실행되는 "프로세스".
	: d 로 끝나는 프로세스들 대부분 데몬이라고 한다
		ex ) dockerd, systemd




네임스페이스 NameSpace >> 커널 기능의 일종으로, 프로세스 그룹의 리소스를 식별 가능하게 하는 기능
	: 그러니까 리소스의 주민등록번호라고 봄 된다
	: 여러 프로세스가 동일한 호스트에서 실행되는 동안 서로를 격리시켜(독립적인 환경에서 작동하게 함으로써) 리소스 충돌을 방지하게 해준다.
	: 대표적인 리눅스 네임스페이스
		1. pid >> Process ID. 리눅스 커널의 프로세스 ID 를 분리
		2. net >> NETworking. 네트워크 인터페이스인 NET 을 관리
		3. ipc >> Inter Process Communication . 프로세스 간 통신을 관리
		4. mnt >> MouNT . 파일 시스템의 마운트를 관리
		5. uts >> Unix Timesharing System. 커널과 버전 식별자를 관리
	: https://www.44bits.io/ko/keyword/linux-namespace






인프라, 미들웨어, 애플리케이션
    : IT 인프라 >> IT 전반적인 구성요소들의 집합.
	: 운영체제, 미들웨어, 애플리케이션, 데이터, 가상화, 서버 등의 자원 등을 모두 포함하는 집합
    : 미들웨어 middle ware >> 운영체제가 제공하지 않는 기능을 제공하는  소프트웨어로, 운영체제와 애플리케이션 사이에서 사용된다.
	: ex ) WAS 
    : 애플리케이션 >> 응용 프로그램. 최종 사용자에게 제공되는 최종적인 소프트웨어.


on premises 온프레미스 >> 사용자가 모든걸(인프라) 직접 관리. 
	: 클라우드와 대립되는 개념. 클라우드처럼 원격 환경에서 운영하는게 아니라, 사용자가 자체적으로 보유한 서버를 운영하느거다.
	

IaaS, PaaS, SaaS >> 클라우드 서비스 모델을 구분할 때 주로 쓰이는 용어
    :  CSP Cloud Servcie Provider (=클라우드 서비스 공급자. 제공업체)가 컴퓨팅 자원의 어느 단계까지 고객에게 서비스할 것인지를 기준으로 나뉜다.
   : 종류 
	1. IaaS Infrastructure as a Service 서비스형 인프라
		: 사용자가 IT 자원에 대해 가장 높은 수준의 유연성, 자유도를 가짐
		: OS , 미들웨어, 애플리케이션을 사용자가 직접 관리
		: 관련 서비스 >>AWS EC2

	2. PaaS Platform as a Service 서비스형 플랫폼 
		: 사용자는 애플리케이션 개발/배포/테스트 가능
		: 애플리케이션만 사용자가 직접 관리
		: 관련 서비스 >>AWS Elastic Beanstalk

	3. SaaS Software as a Service 서비스형 소프트웨어
		: 사용자는 애플리케이션 형태로 완전한 소프트웨어를 제공받음
		: 사용자가 직접 관리하는게 없음
		: 관련 서비스 >> AWS Marketplace Solution, 구글 드라이브, iCloud



고수준 저수준 
	: 추상화 정도를 나타내는 표현.
	: 고수준이면 추상화의 정도가 높은거고 저수준이면 추상화의 정도가 낮은것.


런타임 runtime : 소프트웨어나 프로그램이 실행되는 기간.시간(시작~종료). 
런타임 환경 runtime enviornment : 런타임 동안 소프트웨어나 프로그램이 구동되는 환경

-----------------------------------------------------------------------------------------------------------------


--도커 기초 지식--

이미지 >> 가상머신||컨테이너||프로그램 을 실행하는데 필요한 것들을 가지고 있는 파일.
	: 계층 구조로 이루어져있고, 변경 사항이 생기면 새로운 레이어를 추가해서 기록하게 된다.
		: 그러니까 변경 사항이 있다고 아예 새로 다운받을 필요 없고, 레이어 추가만으로 업데이트 할 수 있다는 거다
	: 이미지를 실행하면 프로세스, 즉 컨테이너가 된다.



가상화 virtualiztion >> 하나의 리소스(물리적인 하드웨어)를 논리적으로 여러 리소스로 분할하는 기술
	: 하나의 하드웨어에서 여러개의 시스템을 효율적으로 사용할 수 있게 해준다
	: 가상화에서, 실제 하드웨어에서의 OS 를 host OS 라고 한다
	: 종류
	   : 쉽게 정리하자면 , OS 수준까지 분리 할건지 VS  host os는 공유하면서 프로세스만 분리할 것인디
		1. 가상머신 vm 을 통한 가상화 
		    : 가상머신 >> 하이퍼바이저를 이용해, 리소스 전체를 가상화한 것.
			: 각각 다른 OS 를 가질 수 있다.  거의 물리적인 컴퓨터와 같은 기능을 한다
			: 이떄 베이스가 되는 기존 환경을 Host OS , 가상 머신으로 생겨난 각각의 환경을 Guest OS 라고 한다
			: 하이퍼바이저 hypervisor >> 가상 머신을 생성 및 활용가능하게 하는 소프트웨어
				: VM과 하드웨어간의 IO명령을 처리하는 인터페이스다 >> 생성한 가상머신의 명령어를 (물리적인) 하드웨어가 이해할 수 있도록 번역해주어, 가상머신을 사용 가능하게 해준다
					: os 별로 사용하는 명령어가 다르기 때문에, 가상머신과 하드웨어의 os 가 다르다고 할 때, 그냥 가상머신의 명령어를 그대로 (물리적인) 하드웨어에서 실행하면 해당 하드웨어는 이게 뭔 개소린지 못알아먹는다 
					: 가상머신을 생성할 때 뿐 아니라, 생성한 가상머신을 사용만 할 때에도 반드시 하이퍼바이저를 거쳐야된다.

				: 참고로  가상머신 vm 통한 가상화 방식도 세부 종류가 있다
					(1) 호스트 가상화 >> 하드웨어 위에 올라간 host os 위에 올라가는 하이퍼바이저
						: 일반적으로 가상머신을 통한 가상화라고 하면 호스트 가상화이다

					(2) 하이퍼바이저 가상화 >> 하드웨어에 바로 올라가는 하이퍼바이저 (host os 가 따로 없다)


			: 가상머신을 사용한 가상화를 할 경우 용량도 크고 속도도 느리다
		

		2. 컨테이너 container 를 통한 가상화
		    : 컨테이너 >> 필요한 프로세스를 표준화된 방식으로 패키징해 격리해 둔 것.
			: 프로세스만 격리한 것으로, 각 컨테이너는  host OS를 공유하게 된다.
				: host OS 를 공유한다
				== 커널을 공유한다 >> 호스트 OS 의 기능을 모두 사용 가능하다
				== 서로 다른 컨테이너끼리 통신을 주고 받을 수 있다
			: 하드웨어위에 host os 가 올라가고, 그 위에 docker 와 같은 컨테이너 응용 프로그램이 올라가고, 그 프로그램 위에 컨테이너들이 올라간다
			:  (걍 화물선에 무작위로 적재하는게 아니라) 표준화된 방식으로 패키징(컨테이너 박스)해서, 컨테이너 엔진(표준화된 운송선)만 있으면 돌아갈 수 있게하는거다.
			: 하이퍼바이저와 guest os 를 따로 필요로 하지 않아 상대적으로 가볍고 빠르다	
			: 컨테이너는 마이크로서비스아키텍쳐 MSA 의 기반이 된다. 
	: https://worlf.tistory.com/141








도커 docker >> 컨테이너 기술을 기반으로 한 가상화 플랫폼. 컨테이너를 활용할수 있게 도와준다
	: 환경에 구애받지 않고 애플리케이션을 신속하게 배포, 확장가능하게 해준다
	: 특
	    1. PaaS 제품 >> 사용자가 개발/배포 가능
	    2, 오픈소스 >> 누구나 사용가능
	: docker 라는 영단어 자체는 컨테이너를 옮기고 관리하는 부두 노동자를 의미. 그러니까 컨테이너를 관리한다는 점에서 유래한 이름.
	: host os 위에 도커가 올라가고 , 도커 위에 각 컨테이너가 올라가게된다
	: 도커 구성 요소
		1. docker-ci >> 도커 클라이언트 Docker Client 
			: 우분투에서 실행하는 터미널과 유사
			: 도커 클라이언트는 명령어 행으로 dockerd API 를 활용해 build , pull, run 같은 명령어로 도커 데몬과 통신한다

		2. dockerd >> 도커데몬. Docker Demon.
			: 데몬 프로세스이다 <-- d 로 끝나는 것에서 유추 가능
				: 그러니까 백그라운드에서 실행된다는 말.
			: 도커 APi 요청을 수신하고 도커 이미지, 컨테이너 등과 같은 도커와 관련한 객체를 관리한다

		3. containerd >> 컨테이너 실행과 관련된 작업을 수행하는 , 고수준 컨테이너 런타임 (high-leve container rumtime ) 
			: 고수준 컨테이너 런타임 이라는 긴 용어에 겁먹지 x . "컨테이너 런타임" 은 걍 솦웨어 이름임.
				: 컨테이너 런타임이란 소프트웨어가 있는데, 해당 소프트웨어의 추상화 정도를 높게 구현한 것이 containerd 라는거다.
			: 컨테이너의 생명주기를 모두 관리. 실행 이외에도 컨테이너 관리를 위한 다양한 역할을 함
			:  containerd-shim을 중간에 끼고 runc 와 통신함으로써 컨테이너를 실행시킴.
				: 하나의 containerd 가 여러 containerd-shim  과 통신하고, 하나의 containerd-shim 은 하나의 runc 와 통신하고 하나의 runc은 하나의 컨테이너를 실행한다.
		
 		3. runc >> 컨테이너 실행과 관련된 작업을 수행하는 저수준 컨테이너 런타임(Low-level Container runtime )
			: 컨테이너 런타임이란 소프트웨어가 있는데, 해당 소프트웨어의 추상화 정도를 낮게 구현한 것이 runc 라는거다.
			: 컨테이너 하나의 "실행"만을 담당

		4. containerd-shim >> containterd 와 runc 사이에서 동작하는 중간 프로세스. 중개자.
			: 컨테이너 실행을 조정하는 역할을 함.
			: conatinerd 가 runc 와 통신 가능하게 함

	: 참고로 도커는 회사명이기도 한다.

